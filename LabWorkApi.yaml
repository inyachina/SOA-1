openapi: 3.0.3
info:
  title: LabWork API
  description: |-
    Сервис ориентированная архитектура. Лабораторная №1
  version: 1.0.0
servers:
  - url: https://se.ifmo.ru/~s283945/soa
tags:
  - name: lab
    description: Everything about labs
  - name: user
    description: Operations about user
paths:
  /labs:
    get:
      tags:
        - lab
      summary: Get all labs 
      description: Get all labs with sorting, filtefing, pagging, sizing
      operationId: getLabs
      parameters:
        - name: size
          in: query
          description: Set size of page
          explode: true
          schema:
            type: string
            default: 20
        - name: page
          in: query
          description: Set page number
          explode: true
          schema:
            type: string
            default: 1
        - name: sort
          in: query
          description: Set sort field rule
          explode: true
          schema:
            type: array
            items: 
              type: string
              maxItems: 1
              enum: [name, x, y, creationDate, minimalPoint, personalQualitiesMaximum, description,difficulty, disciplineName, disciplineLectureHours, disciplineSelfStudyHours]
        - name: asceding
          in: query
          description: Set sort order rule
          explode: true
          schema:
            type: boolean
        - name: filter
          in: query
          description: Set filter substring
          explode: true
          schema:
            type: string
          
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Lab'   
        '400':
          description: Something went wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'     
  /lab/{id}:
    get:
      tags:
        - lab
      summary: Get an existing lab
      description: Get an existing lab by Id
      operationId: getLab
      parameters:
        - name: id
          in: path
          description: lab's id that need to be readden
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lab'   
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'     
        '404':
          description: Lab not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'   
    put:
      tags:
        - lab
      summary: Update an existing lab
      description: Update an existing lab by Id
      operationId: updateLab
      parameters:
        - name: id
          in: path
          description: lab's id that need to be updated
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Lab'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Lab'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lab'   
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'     
        '404':
          description: Lab not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'   
        '405':
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'    
    delete:
      tags:
        - lab
      summary: Delete an existing lab
      description: Delete an existing lab by Id
      operationId: deleteLab
      parameters:
        - name: id
          in: path
          description: lab's id that need to be deleted
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lab'   
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'     
        '404':
          description: Lab not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'   
  /lab:
    post: 
      tags:
        - lab
      summary: Add new lab
      operationId: addLab
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Lab'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Lab'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lab'   
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse' 
        '405':
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'    
  /lab/averageMinimalPoint :
    get:
      tags:
        - lab
      summary: Get an average Minimal Point of labs
      operationId: averageMinimalPoint

      responses:
        '200':
          description: Average Minimal Point
          content:
            application/json:
              schema:
                type: object
                properties:
                  averageMinimalPoint:
                    type: integer
        '400':
          description: Something went wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'     
        '404':
          description: There is not a single lab
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'  
  /lab/groupByPersonalQualities:
    get:
      tags:
        - lab
      summary: Group labs by personal qualities maximum 
      operationId: groupByPersonalQualities

      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  groupName:
                    type: string
                  items:
                    type: array
                    items: 
                      type: array
                      items:
                        $ref: '#/components/schemas/Lab'   
        '400':
          description: Something went wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse' 
        '404':  
          description: There is not a single lab
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /lab/fiterByDescription/{substring}:
    get:
      tags:
        - lab
      summary: Find all labs that description includes subsring
      operationId: fiterByDescription
      parameters:
        - name: substring
          in: path
          description: Set subsring that filters all labs by description
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Lab'   
        '400':  
          description: Something went wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse' 
        '404':  
          description: There is not a single lab
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
    Lab:
      type: object
      required: 
        - name
        - coordinates
        - creationDate
        - minimalPoint
        - personalQualitiesMaximum
        - description
        - difficulty
        - discipline
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: Service oriented architecture
        coordinates:
           $ref: '#/components/schemas/Coordinates'
        creationDate:
          type: string
          format: date-time
          example: "Wed Mar 27 08:22:02 IST 2015"
        minimalPoint:
          type: integer
          format: int64
          example: 6
          description: value should me more then 0
        personalQualitiesMaximum:
          type: number
          format: float
          example: 2
          description: value should me more then 0
        difficulty:
          $ref: '#/components/schemas/Difficulty'
        discipline:
          $ref: '#/components/schemas/Discipline'
      xml:
        name: order
    Coordinates:
      type: object
      required: 
        - x
      properties:
        x:
          type: number
          format: double
          example: 1.2
          description: value should me less then 295
        y:
          type: number
          format: double
          example: 1.2
          description: value should me less then 850
    Difficulty:
      type: string
      enum: 
        - VERY_EASY
        - NORMAL
        - VERY_HARD
        - IMPOSSIBLE
        - INSANE
    Discipline :
      type: object
      required:
        - name
        - selfStudyHours
      properties:
        name:
          type: string
          example: Service Oriented Architecture
        lectureHours:
          type: integer
          format: int32
          example: 2
        selfStudyHours:
          type: integer
          format: int32
          example: 2
      xml:
        name: address
    # LabFields:
    #   type: string
    #   enum:
    #     - name
    #     - x
    #     - y
    #     - creationDate
    #     - minimalPoint
    #     - personalQualitiesMaximum
    #     - description
    #     - difficulty
    #     - disciplineName
    #     - disciplineLectureHours
    #     - disciplineSelfStudyHours
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Lab:
      description: Lab object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Lab'
        application/xml:
          schema:
            $ref: '#/components/schemas/Lab'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []